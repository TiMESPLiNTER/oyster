#!/usr/bin/env php
<?php

declare(strict_types=1);

namespace Timesplinter\Oyster\Bin;

use Timesplinter\Oyster\Command\CdCommand;
use Timesplinter\Oyster\Command\HistoryCommand;
use Timesplinter\Oyster\Console;
use Timesplinter\Oyster\Executor;
use Timesplinter\Oyster\Command\PwdCommand;
use Timesplinter\Oyster\Helper\NullHistory;
use Timesplinter\Oyster\History\ReadlineHistory;
use Timesplinter\Oyster\Input\ReadlineInput;
use Timesplinter\Oyster\Input\StdInInput;
use Timesplinter\Oyster\OperatingSystemAdapter\DarwinAdapter;
use Timesplinter\Oyster\OperatingSystemAdapter\LinuxAdapter;
use Timesplinter\Oyster\Output\BufferedOutput;
use Timesplinter\Oyster\Output\StdOutOutput;

require __DIR__ . '/vendor/autoload.php';

$stdOutOutput = new StdOutOutput();

$osAdapterOutput = new BufferedOutput();
$osAdapterExecutor = new Executor($osAdapterOutput);

if ('Darwin' === PHP_OS) {
    $osAdapter = new DarwinAdapter($osAdapterExecutor, $osAdapterOutput);
} elseif ('Linux' === PHP_OS) {
    $osAdapter = new LinuxAdapter($osAdapterExecutor, $osAdapterOutput);
} else {
    $stdOutOutput->writeLn('Operating system currently not supported: '.PHP_OS);
    exit;
}

if(true === function_exists('readline')) {
    $history = new ReadlineHistory();
    $input = new ReadlineInput();
} else {
    $history = new NullHistory();
    $input = new StdInInput();
    $stdOutOutput->writeLn('INFO: You\'re PHP binary isn\'t compiled with readline support.');
}

$builtinCommands = [
    new PwdCommand($stdOutOutput),
    new CdCommand(),
    new HistoryCommand($stdOutOutput, $history)
];

$executor = new Executor($stdOutOutput);

$console = new Console($input, $stdOutOutput, $osAdapter, $builtinCommands, $executor, $history);
$console->run();
